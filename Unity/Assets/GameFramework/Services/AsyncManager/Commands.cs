
using Service.Events;
using System;

using System;
using Zenject;
using UniRx;


///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 
namespace Service.AsyncManager{
    public class Commands : CommandsBase {
        IAsyncManager _service;

        [Inject]
        void Initialize([Inject] IAsyncManager service) {
            _service = service;

            this.OnEvent<AddToMainThreadCommand>().Subscribe(e => AddToMainThreadCommandHandler(e)).AddTo(this);
            this.OnEvent<AddToWorkerThreadCommand>().Subscribe(e => AddToWorkerThreadCommandHandler(e)).AddTo(this);
            this.OnEvent<CallCommand>().Subscribe(e => CallCommandHandler(e)).AddTo(this);
            this.OnEvent<DisposeThreadsCommand>().Subscribe(e => DisposeThreadsCommandHandler(e)).AddTo(this);

        }


        public class AddToMainThreadCommand {
            public AsyncFuture result;
                        public Action act;
            
            
        }

		protected void AddToMainThreadCommandHandler(AddToMainThreadCommand cmd) {
            //Profiler.BeginSample("AddToMainThreadCommandHandler");
            cmd.result = _service.AddToMainThread(cmd.act);
            //Profiler.EndSample();
        }


        public class AddToWorkerThreadCommand {
            public AsyncFuture result;
                        public Action act;
                        public Action onFinished;
            
            
        }

		protected void AddToWorkerThreadCommandHandler(AddToWorkerThreadCommand cmd) {
            //Profiler.BeginSample("AddToWorkerThreadCommandHandler");
            cmd.result = _service.AddToWorkerThread(cmd.act,cmd.onFinished);
            //Profiler.EndSample();
        }


        public class CallCommand {
            public AsyncFuture result;
                        public Action act;
                        public bool usingCoroutine;
            
            
        }

		protected void CallCommandHandler(CallCommand cmd) {
            //Profiler.BeginSample("CallCommandHandler");
            cmd.result = _service.Call(cmd.act,cmd.usingCoroutine);
            //Profiler.EndSample();
        }


        public class DisposeThreadsCommand {

            
        }

		protected void DisposeThreadsCommandHandler(DisposeThreadsCommand cmd) {
            //Profiler.BeginSample("DisposeThreadsCommandHandler");
            _service.DisposeThreads();
            //Profiler.EndSample();
        }

    }


    public class CommandsInstaller : Installer<CommandsInstaller>{
        public override void InstallBindings()
        {
            Commands cmds = Container.Instantiate<Commands>();
            Container.BindAllInterfaces<Commands>().FromInstance(cmds);
        }
    }
}
///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 


